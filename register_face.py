import cv2
import os
import numpy as np
import shutil
import argparse
from FaceRecognite import Regconizer
from VectorDB import VectorBD
from utils import check_is_id_exist

def main(name: str, id: int):
    os.makedirs('images', exist_ok=True)

    if check_is_id_exist(id):
        print(f"‚ùå ID {id} ƒë√£ t·ªìn t·∫°i trong database. H√£y ch·ªçn ID kh√°c.")
        return

    # T·∫°o th∆∞ m·ª•c l∆∞u ·∫£nh
    dir_path = f'./images/{id}_{name}'
    os.makedirs(dir_path, exist_ok=True)

    # C√°c h∆∞·ªõng c·∫ßn ch·ª•p
    directions = ['mid', 'left', 'right', 'up', 'down']
    direction_iter = iter(directions)

    # Kh·ªüi t·∫°o nh·∫≠n di·ªán v√† DB
    rec = Regconizer()
    vt_db = VectorBD()

    # M·ªü camera
    cam = cv2.VideoCapture(0)

    def exit_program(remove_folder=False):
        cam.release()
        cv2.destroyAllWindows()
        if remove_folder and os.path.exists(dir_path):
            shutil.rmtree(dir_path)
            print(f"‚ùå ƒê√£ xo√° folder {dir_path} v√¨ ph√°t hi·ªán nhi·ªÅu khu√¥n m·∫∑t.")
        print("Tho√°t ch∆∞∆°ng tr√¨nh")
        exit(0)

    print("üëâ H√£y l·∫ßn l∆∞·ª£t nh√¨n: mid ‚Üí left ‚Üí right ‚Üí up ‚Üí down. Nh·∫•n 'p' ƒë·ªÉ ch·ª•p, 'q' ƒë·ªÉ tho√°t.")

    embeds = []  # list ch·ª©a embedding c√°c h∆∞·ªõng

    while True:
        ret, frame = cam.read()
        frame = cv2.flip(frame, 1)

        # L·∫•y embedding t·ª´ frame
        embed = rec.get_face_embedding(frame)

        # B·∫•m 'p' ƒë·ªÉ ch·ª•p ·∫£nh
        if cv2.waitKey(1) & 0xFF == ord('p'):
            if len(embed) == 1:
                try:
                    dir_name = next(direction_iter)
                    img_path = f"{dir_path}/{dir_name}.jpg"
                    cv2.imwrite(img_path, frame)

                    embeds.append(embed[0])  # embed l√† list, l·∫•y ph·∫ßn t·ª≠ [0]
                    print(f"ƒê√£ l∆∞u ·∫£nh {dir_name} ({img_path}) v√† embedding t·∫°m th·ªùi")

                except StopIteration:
                    # Sau khi ch·ª•p ƒë·ªß 5 h∆∞·ªõng ‚Üí convert sang numpy v√† l∆∞u v√†o DB
                    embeds = np.array(embeds)
                    vt_db.add_emb(embeds, name, id)
                    print("‚úÖ ƒê√£ ƒë·ªß ·∫£nh, ho√†n t·∫•t ƒëƒÉng k√Ω khu√¥n m·∫∑t v√† l∆∞u embeddings v√†o DB.")
                    exit_program()
            elif len(embed) == 0:
                print("‚ö†Ô∏è Kh√¥ng ph√°t hi·ªán g∆∞∆°ng m·∫∑t n√†o")
            else:
                print("‚ö†Ô∏è T·ªìn t·∫°i nhi·ªÅu h∆°n 1 g∆∞∆°ng m·∫∑t")

        # Hi·ªÉn th·ªã khung h√¨nh v·ªõi bounding box
        cv2.imshow("Camera", rec.detector_face.img_with_bbs)

        # B·∫•m 'q' ƒë·ªÉ tho√°t
        if cv2.waitKey(1) & 0xFF == ord('q'):
            exit_program()

if __name__ == "__main__":
    parser = argparse.ArgumentParser()
    parser.add_argument("--name", type=str, required=True, help="T√™n ng∆∞·ªùi c·∫ßn ƒëƒÉng k√Ω")
    parser.add_argument("--id", type=int, required=True, help="ID ng∆∞·ªùi c·∫ßn ƒëƒÉng k√Ω")
    args = parser.parse_args()

    main(args.name, args.id)
